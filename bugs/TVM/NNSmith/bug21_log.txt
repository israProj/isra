Traceback (most recent call last):
  [bt] (8) /artifact/sut/tvm/build/libtvm.so(tvm::relay::CompileEngineImpl::JIT(tvm::relay::CCacheKey const&)+0x30) [0x7f1b066d82a0]
  [bt] (7) /artifact/sut/tvm/build/libtvm.so(tvm::relay::CompileEngineImpl::LowerInternal(tvm::relay::CCacheKey const&)+0x75e) [0x7f1b066d77ae]
  [bt] (6) /artifact/sut/tvm/build/libtvm.so(tvm::relay::CreateSchedule(tvm::relay::Function const&, tvm::Target const&)+0x44a) [0x7f1b066c09ca]
  [bt] (5) /artifact/sut/tvm/build/libtvm.so(tvm::relay::ScheduleGetter::Create(tvm::relay::Function const&)+0x296) [0x7f1b066cd616]
  [bt] (4) /artifact/sut/tvm/build/libtvm.so(tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)+0xbe) [0x7f1b066d322e]
  [bt] (3) /artifact/sut/tvm/build/libtvm.so(tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)+0x76) [0x7f1b066d2f86]
  [bt] (2) /artifact/sut/tvm/build/libtvm.so(tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::InitVTable()::{lambda(tvm::runtime::ObjectRef const&, tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>*)#6}::_FUN(tvm::runtime::ObjectRef const&, tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>*)+0x2c) [0x7f1b066c4b1c]
  [bt] (1) /artifact/sut/tvm/build/libtvm.so(tvm::relay::ScheduleGetter::VisitExpr_(tvm::relay::CallNode const*)+0x6d6) [0x7f1b066cb356]
  [bt] (0) /artifact/sut/tvm/build/libtvm.so(+0x526fad) [0x7f1b059dcfad]
  File "/artifact/sut/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/artifact/sut/tvm/python/tvm/relay/backend/compile_engine.py", line 300, in lower_call
    best_impl, outputs = select_implementation(op, call.attrs, inputs, ret_type, target)
  File "/artifact/sut/tvm/python/tvm/relay/backend/compile_engine.py", line 189, in select_implementation
    all_impls = get_valid_implementations(op, attrs, inputs, out_type, target)
  File "/artifact/sut/tvm/python/tvm/relay/backend/compile_engine.py", line 130, in get_valid_implementations
    strategy = fstrategy(attrs, inputs, out_type, target)
  File "/artifact/sut/tvm/python/tvm/target/generic_func.py", line 46, in __call__
    return _ffi_api.GenericFuncCallFunc(self, *args)
  File "/artifact/sut/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
  [bt] (3) /artifact/sut/tvm/build/libtvm.so(TVMFuncCall+0x63) [0x7f1b06887363]
  [bt] (2) /artifact/sut/tvm/build/libtvm.so(+0xd0c41b) [0x7f1b061c241b]
  [bt] (1) /artifact/sut/tvm/build/libtvm.so(tvm::GenericFunc::CallPacked(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const+0x1ab) [0x7f1b061c216b]
  [bt] (0) /artifact/sut/tvm/build/libtvm.so(+0x526fad) [0x7f1b059dcfad]
  File "/artifact/sut/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/artifact/sut/tvm/python/tvm/relay/op/strategy/x86.py", line 318, in dense_strategy_cpu
    m, _ = inputs[0].shape
ValueError: not enough values to unpack (expected 2, got 1)